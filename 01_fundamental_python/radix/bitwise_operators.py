# 17 13 & | ^ ~ 计算机按照补码来的
# 17                             13
# 原码 00010001                 00001101
# 反码 00010001                 00001101
# 补码 00010001                 00001101
# num01=17
# num02=13
# 1 按位与 &
# 00010001
# 00001101
# 00000001
# 得到1
# print(num01&num02)
# print(f"正数按位与&的运算:{num01}&{num02}")
num1 = 17
num2 = 13
# f"{value:3}" → 输出最少 3 个字符，右对齐，不足前面补空格。
#
# f"{value:08b}" → 输出二进制，宽度 8，不足前面补 0。
#
# f"..." → 大括号 {} 里写表达式，结果会自动替换到字符串里。
print(f"正数与运算: {num1} & {num2}")
print(f"{num1:3} : {num1:08b}")
print(f"{num1:3} : {num1:08o}")
print(f"{num1:3} : {num1:08x}")
print(f"{num2:3} : {num2:08b}")
print(f"{num1 & num2:3} : {num1 & num2:08b}")
print()

# 2 按位或| 只要有一个1就是1
# 00010001
# 00001101
# 00011101  得到29
print(f"正数按位或|的运算:{num1}|{num2}")
print(f"{num1:3} : {num1:08b}")
print(f"{num2:3} : {num2:08b}")
print(f"{num1 | num2:3} : {num1 | num2:08b}")
print()

# 3 按位异或^ 都是1 取0 一个1取1 都是0 取0
# 00010001
# 00001101
# 00011100  得到28
print(f"正数按位异或^的运算:{num1}^{num2}")
print(f"{num1:3} : {num1:08b}")
print(f"{num2:3} : {num2:08b}")
print(f"{num1 ^ num2:3} : {num1 ^ num2:08b}")
print()


# 4 按位取反~ 0变1 1变0
# 00010001
# 11101110
# 最高位的1是符号位 代表~后得到了负数
# 那么 得到的真值的过程是
# 补码-反码-原码
# 11101110 - 11101101- 10010010
# 10010010  得到-18

print(f"非运算: ~{num1}")
print(f"{num1:3}原码 : {num1:08b}")
print(f"{num1:3}取反 : {(1 << 8) - 1 ^ num1:08b}，得到结果的补码")
print(f"{~num1:3}原码 : {~num1:08b}，计算出结果的原码")
print("=============有负数的按位与、按位或运算==============")
print("=============有负数的按位与、按位或运算==============")
print("=============有负数的按位与、按位或运算==============")
print("=============有负数的按位与、按位或运算==============")

num3=-12
# 10001100
# 11110011
# 11110100
#17 00010001
# 按位& 00010000 16
print(f"负数按位与&的运算:{num3}&{num1}")
print(f"{num3:3} : {num3:08b}")
print(f"{num1:3} : {num1:08b}")
print(f"{num3 & num1:3} : {num3 & num1:08b}")
print()


# 11110100
# 00010001
# 11110101
# 11110100
# 10001011 -11
print(f"有负数的或运算: {num3} | {num1}")
print(f"{num3:3}原码 : {num3:08b}")
print(f"{num3:3}反码 : {(1 << 8) - 1 + num3:08b}")
print(f"{num3:3}补码 : {(1 << 8) + num3:08b}")
print(f"{num1:3}补码 : {num1:08b}")
print(f"{num1 | num3:3}补码 : {(1 << 8) + (num1 | num3):08b}，得到结果的补码")
print(f"{num1 | num3}原码 : {num1 | num3:08b}，计算出结果的原码")

